// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  clerkUserId  String        @unique
  email        String        @unique
  name         String?
  imageUrl     String?
  role         Role          @default(USER) // ENUM
  transactions Transaction[]
  accounts     Account[]
  budgets      Budget[]
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0) // will ask initial balance while creating an account
  isDefault    Boolean       @default(false)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt

  @@index([userId])
  @@map("accounts")
}

enum AccountType {
  CURRENT
  SAVINGS
}

model Transaction {
  id           String            @id @default(uuid())
  type         TransactionType
  amount       Decimal
  descriptions String?
  date         DateTime
  category     String
  receiptUrl   String?
  status       TransactionStatus @default(COMPLETED)
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId    String
  account      Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createAt     DateTime          @default(now())
  updateAt     DateTime          @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Budget {
  id       String   @id @default(uuid())
  amount   Decimal
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([userId])
  @@map("budgets")
}
